
<project name="opi-lab-3" default="compile" basedir=".">

<!--    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>-->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <property name="os.name" value="${os.name}" />
    <condition property="script.ext" value=".sh">
        <os family="unix" />
    </condition>
    <condition property="script.ext" value=".bat">
        <os family="windows" />
    </condition>

    <!-- Include variables and constants -->
    <property file="build.properties" />
    <property file="secret.properties" />

    <property name="wildfly.start.script" value="${wildfly.home}/bin/standalone${script.ext}" />
    <property name="wildfly.stop.script" value="${wildfly.home}/bin/jboss-cli${script.ext} --connect command=:shutdown" />

    <!-- Define the classpath for the project -->
    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Clean the build directory -->
    <target name="clean">
        <delete dir="${build.dir}" />
        <antcall target="init"/>
    </target>
    
    <!-- Create the build directory structure -->
    <target name="init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${classes.dir}" />

        <exec executable="git">
            <arg line="init"/>
        </exec>

        <exec executable="svnadmin">
            <arg line="create --fs-type fsfs ${svn.repo}"/>
        </exec>

        <path id="repo.path">
            <pathelement location="${basedir}/${svn.repo}"/>
        </path>
        <pathconvert property="repo.url" refid="repo.path">
            <map from="\\" to="/"/>
            <map from=":" to=""/>
        </pathconvert>
        <exec executable="svn">
            <arg line="checkout file:///${repo.url} ${svn.main_dir}"/>
        </exec>
    </target>

    <!-- [default] Compile project -->
    <target name="compile" depends="init">
        <javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false" classpath="project.classpath">
            <classpath refid="project.classpath" />
            <compilerarg line="-Xlint:unchecked" />
        </javac>
    </target>

    <!-- Build the project and package it into a WAR file -->
    <target name="build" depends="compile">
        <copy todir="${build.dir}/webapp">
            <fileset dir="${webapp.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/classes">
            <fileset dir="${classes.dir}">
                <include name="**/*" />
            </fileset>
        </copy>
        <copy todir="${build.dir}/webapp/WEB-INF/lib">
            <fileset dir="${lib.dir}">
                <include name="*.jar" />
            </fileset>
        </copy>
        <war destfile="${build.dir}/${war.name}" webxml="${webapp.dir}/WEB-INF/web.xml">
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Version" value="1.0-SNAPSHOT"/>
            </manifest>
            <fileset dir="${build.dir}/webapp">
                <include name="**/*" />
                <exclude name="**/WEB-INF/web.xml" />
            </fileset>
        </war>
    </target>

    <!-- Validate XML files -->
    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${basedir}">
                <include name="**/*.xml" />
            </fileset>
        </xmlvalidate>
    </target>

    <!-- Classpath for JUnit tests -->
    <path id="test.classpath">
        <path refid="project.classpath" />
        <pathelement location="${build.dir}/webapp/WEB-INF/classes" />
        <pathelement location="${build.dir}/test-classes" />
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Test isInArea function using Junit -->
    <target name="test" depends="build">
        <tstamp>
            <format property="timestamp" pattern="dd-MM-yyyy_HH-mm-ss"/>
        </tstamp>

        <mkdir dir="${build.dir}/test-classes"/>
        <javac srcdir="${test.dir}" destdir="${build.dir}/test-classes" includeantruntime="false" classpathref="test.classpath">
            <compilerarg line="-Xlint:unchecked"/>
        </javac>
        <mkdir dir="${build.dir}/test-results/${timestamp}"/>
        <junitlauncher haltonfailure="true" printsummary="true" >
            <classpath>
                <path refid="test.classpath"/>
                <pathelement location="${build.dir}"/>
            </classpath>
            <testclasses outputdir="${build.dir}/test-results/${timestamp}">
                <fileset dir="${build.dir}/test-classes" includes="**/*Test.class"/>
                <listener type="legacy-brief" sendSysOut="true" sendSysErr="true"/>
                <listener type="legacy-xml" sendSysOut="true" sendSysErr="true"/>
            </testclasses>
        </junitlauncher>
    </target>

    <!-- Convert native2ascii for localization files -->
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" dest="${build.dir}/webapp/WEB-INF/classes" src="${resources.dir}">
            <include name="**/*.properties" />
        </native2ascii>
    </target>

    <!-- Deploy war to helios -->
    <target name="scp" depends="build">
<!--        <scp todir="${scp.host}" port="${scp.port}" password="${scp.password}" trust="true" >-->
<!--            <fileset dir="${build.dir}">-->
<!--                <include name="**/*.war" />-->
<!--            </fileset>-->
<!--        </scp>-->
        <exec executable="pscp">
            <arg value="-pw"/>
            <arg value="${scp.password}"/>
            <arg value="-P"/>
            <arg value="${scp.port}"/>
            <arg value="${build.dir}/${war.name}"/>
            <arg value="${scp.host}:${scp.path}"/>
        </exec>
    </target>

    <!-- Alternative version of the project -->
    <target name="alt">
        <copy todir="${src.tmp}">
            <fileset dir="${src}"/>
        </copy>

        <replace dir="${src}">
            <exclude name="∗∗/∗.jar"/>
            <replacefilter token="${alt.replace.from1}" value="${alt.replace.to1}"/>
        </replace>

        <replace dir="${src}">
            <exclude name="∗∗/∗.jar"/>
            <replacefilter token="${alt.replace.from2}" value="${alt.replace.to2}"/>
        </replace>

        <replace dir="${src}">
            <exclude name="∗∗/∗.jar"/>
            <replacefilter token="${alt.replace.from3}" value="${alt.replace.to3}"/>
        </replace>

        <move todir="${src}">
            <fileset dir="${src}">
            </fileset>
            <filtermapper>
                <replacestring from="${alt.replace.from1}" to="${alt.replace.to1}"/>
                <replacestring from="${alt.replace.from2}" to="${alt.replace.to2}"/>
                <replacestring from="${alt.replace.from3}" to="${alt.replace.to3}"/>
            </filtermapper>
        </move>

        <antcall target="clean"/>
        <antcall target="build"/>

        <delete dir="${src}"/>

        <copy todir="${src}">
            <fileset dir="${src.tmp}"/>
        </copy>

        <delete dir="${src.tmp}"/>
    </target>

    <!-- Alternative environment -->
    <target name="env" depends="build, start-wfly">
        <echo message="Deploying WAR file to WildFly server" />
        <copy file="${build.dir}/${war.name}" todir="${wildfly.home}/standalone/deployments" />
    </target>

    <!-- Find the last working revision if compilation fails -->
    <target name="history"
            description="если проект не удаётся скомпилировать (цель compile), загружается предыдущая версия из репозитория svn. Операция повторяется до тех пор, пока проект не удастся собрать, либо не будет получена самая первая ревизия из репозитория. Если такая ревизия найдена, то формируется файл, содержащий результат операции diff для всех файлов, измёненных в ревизии, следующей непосредственно за последней работающей.">
        <exec executable="svn" outputproperty="revision">
            <arg value="info"/>
            <arg value="--show-item"/>
            <arg value="revision"/>
        </exec>

        <trycatch>
            <try>
                <antcall target="compile"/>
            </try>
            <catch>
                <exec executable="svn">
                    <arg value="update"/>
                    <arg value="-r"/>
                    <arg value="${revision}"/>
                    <redirector outputproperty="svn.output"/>
                </exec>
                <var name="break.flag" unset="true"/>
                <for param="i" begin="${revision}" end="0" step="-1">
                    <sequential>
                        <if>
                            <not>
                                <isset property="break.flag"/>
                            </not>
                            <then>
                                <echo>Revision: ${revision}</echo>
                                <trycatch>
                                    <try>
                                        <antcall target="compile"/>
                                        <property name="prev_revision" value="0"/>
                                        <script language="javascript">
                                            var rev = project.getProperty("revision");
                                            rev = rev  -1;
                                            project.setProperty("prev_revision", rev);
                                        </script>
                                        <exec executable="svn">
                                            <arg value="diff"/>
                                            <arg value="-r"/>
                                            <arg value="${prev_revision}:${revision}"/>
                                            <arg value="--summarize"/>
                                            <redirector output="${diff_file}"/>
                                        </exec>
                                        <property name="break.flag" value="true"/>
                                    </try>
                                    <catch>
                                        <script language="javascript">
                                            var rev = project.getProperty("revision");
                                            rev = rev -1;
                                            project.setProperty("revision", rev);
                                        </script>
                                        <exec executable="svn">
                                            <arg value="update"/>
                                            <arg value="-r"/>
                                            <arg value="${revision}"/>
                                            <arg value="--accept"/>
                                            <arg value="theirs-full"/>
                                            <redirector outputproperty="svn.output"/>
                                        </exec>
                                    </catch>
                                </trycatch>
                            </then>
                        </if>
                    </sequential>
                </for>
            </catch>
        </trycatch>
    </target>


    <!-- Generate MD5 & SHA-1 hash -->
    <target name="generate-checksums">
        <delete file="${checksums.md5.file}" quiet="true"/>
        <delete file="${checksums.sha1.file}" quiet="true"/>

        <checksum algorithm="MD5" fileext=".md5">
            <fileset dir="${build.dir}/webapp"/>
        </checksum>
        <checksum algorithm="SHA1" fileext=".sha1">
            <fileset dir="${build.dir}/webapp"/>
        </checksum>

        <concat destfile="${checksums.md5.file}">
            <fileset dir="${build.dir}/webapp" includes="**/*.md5"/>
        </concat>
        <concat destfile="${checksums.sha1.file}">
            <fileset dir="${build.dir}/webapp" includes="**/*.sha1"/>
        </concat>

        <delete>
            <fileset dir="${build.dir}/webapp" includes="**/*.md5"/>
            <fileset dir="${build.dir}/webapp" includes="**/*.sha1"/>
        </delete>
    </target>

    <!-- Generate docs -->
    <target name="doc" depends="build, generate-checksums">
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc sourcepath="${src.dir}" destdir="${build.dir}/javadoc" packagenames="*">
            <classpath refid="project.classpath" />
        </javadoc>

        <loadfile property="md5" srcFile="${checksums.md5.file}">
            <filterchain>
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <loadfile property="sha1" srcFile="${checksums.sha1.file}">
            <filterchain>
                <striplinebreaks/>
            </filterchain>
        </loadfile>


        <war destfile="${build.dir}/${war.name}" update="true">
            <fileset dir="${build.dir}/javadoc"/>
            <manifest>
                <attribute name="MD5-Digest" value="${md5}"/>
                <attribute name="SHA1-Digest" value="${sha1}"/>
            </manifest>
        </war>


    </target>

    <!-- Play music on build -->
    <target name="music" depends="build">
        <sound>
            <success source="${lib.dir}/music/success.wav"/>
            <fail source="${lib.dir}/music/failure.wav"/>
        </sound>
    </target>


    <!-- Junit reports -->
    <target name="report" depends="test">
        <tstamp>
            <format property="timestamp" pattern="dd.MM.yyyy_HH-mm-ss"/>
        </tstamp>

        <mkdir dir="${build.dir}/test-results/report_${timestamp}"/>
        <junitreport todir="${build.dir}/test-results/report_${timestamp}">
            <fileset dir="${build.dir}/test-results">
                <include name="**/TEST-*.xml"/>
            </fileset>
        </junitreport>

        <copy todir="${svn.report}">
            <fileset dir="${build.dir}/test-results/report_${timestamp}"/>
        </copy>

        <exec executable="svn" dir="${svn.report}">
            <arg line="add --force ."/>
        </exec>
        <exec executable="svn" dir="${svn.main_dir}">
            <arg line="commit -m 'Auto-test commit'"/>
        </exec>
    </target>

    <!-- Check special classes -->
    <target name="diff">
        <exec executable="git" outputproperty="git.status" failonerror="true">
            <arg value="status"/>
            <arg value="--porcelain"/>
        </exec>

        <loadfile property="classes.to.check" srcFile="${lib.dir}/classes.txt">
            <filterchain>
                <tokenfilter delimoutput=","/>
            </filterchain>
        </loadfile>
        <echo message="${classes.to.check}"/>

        <condition property="changes.detected">
            <and>
                <contains string="${git.status}" substring="M"/>
                <contains string="${git.status}" substring="${classes.to.check}"/>
            </and>
        </condition>

        <antcall target="commit">
            <param name="message" value="Automated commit triggered by changes in specified classes"/>
        </antcall>
    </target>

    <target name="commit" unless="${changes.detected}">
        <exec executable="git" failonerror="true">
            <arg value="add"/>
            <arg value="."/>
        </exec>

        <exec executable="git" failonerror="true">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="${message}"/>
        </exec>
    </target>

    <target name="svn-commit">
        <copy todir="${svn.src}">
            <fileset dir="${src}"/>
        </copy>

        <exec executable="svn" dir="${svn.main_dir}">
            <arg line="add --force ."/>
        </exec>

        <exec executable="svn" dir="${svn.main_dir}">
            <arg line="commit -m 'Commit from Ant'"/>
        </exec>
    </target>

    <target name="team">
        <copy todir="${src.tmp}">
            <fileset dir="${src}"/>
        </copy>
        <delete dir="${src}"/>

        <mkdir dir="${build.dir}/team"/>

        <exec executable="svn" dir="${svn.main_dir}">
            <arg line="update -r PREV"/>
        </exec>

        <copy todir="${src}">
            <fileset dir="${svn.src}"/>
        </copy>
        <antcall target="build"/>
        <delete dir="${src}"/>
        <move file ="${build.dir}/${war.name}" tofile="${build.dir}/build-1.war"/>
        <move file="${build.dir}/build-1.war" todir="${build.dir}/team"/>


        <exec executable="svn" dir="${svn.main_dir}">
            <arg line="update -r PREV"/>
        </exec>

        <copy todir="${src}">
            <fileset dir="${svn.src}"/>
        </copy>

        <antcall target="build"/>
        <delete dir="${src}"/>
        <move file ="${build.dir}/${war.name}" tofile="${build.dir}/build-2.war"/>
        <move file="${build.dir}/build-2.war" todir="${build.dir}/team"/>


        <exec executable="svn" dir="${svn.main_dir}">
            <arg line="update"/>
        </exec>

        <zip destfile="${build.dir}/team.zip" basedir="${build.dir}/team" />
        <copy todir="${src}">
            <fileset dir="${src.tmp}"/>
        </copy>

        <delete dir="${src.tmp}"/>
    </target>

    <!-- Target to start WildFly -->
    <target name="start-wfly">
        <echo message="Starting WildFly server using ${wildfly.start.script}" />
        <echo message="wildfly.java.home is ${wildfly.java.home}"/>
        <exec executable="${wildfly.start.script}">
            <env key="JAVA_HOME" value="${wildfly.java.home}" />
            <env key="JAVA_OPTS" value="${wildfly.java.opts}" />
            <arg value="-c" />
            <arg value="${wildfly.config}" />
            <arg value="-Djboss.http.port=${wildfly.http.port}"/>
        </exec>
    </target>

    <!-- Target to stop WildFly -->
    <target name="stop-wfly">
        <echo message="Stopping WildFly server" />
        <exec executable="${wildfly.home}/bin/jboss-cli${script.ext}">
            <arg value="--connect" />
            <arg value="command=:shutdown" />
        </exec>
    </target>
</project>
